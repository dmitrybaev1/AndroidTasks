/****** MAPGDIEX.H ************* Belenkov O.V.   ****** 26/10/15 ***
******* MAPGDIEX.H ************* Dishlenko S.G.  ****** 26/03/12 ***
******* MAPGDIEX.H ************* Shabakov D.A.   ****** 26/08/13 ***
******* MAPGDIEX.H ************* Panteleeva N.A. ****** 27/08/13 ***
******* MAPGDIEX.H ************* Savelov A.S.    ****** 17/08/15 ***
******* MAPGDIEX.H ************* Derevyagina Zh.A.***** 16/11/15 ***
*                                                                  *
*              Copyright (c) PANORAMA Group 1991-2015              *
*                      All Rights Reserved                         *
*                                                                  *
********************************************************************
*                                                                  *
*      ОПИСАНИЕ ПАРАМЕТРОВ ФУНКЦИЙ ВИЗУАЛИЗАЦИИ ПРОИЗВОЛЬНЫХ       *
*             ГРАФИЧЕСКИХ ОБ ЕКТОВ ЭЛЕКТРОННОЙ КАРТЫ               *
*                                                                  *
*******************************************************************/

#ifndef MAPGDIEX_H
#define MAPGDIEX_H

#ifndef MAPGDI_H
  #include "mapgdi.h"
#endif

#if defined(BUILD_DLL64) && defined(LINUXAPI)            // 26/03/12
#pragma pack(push,1)
#endif

#define  IMLIDENT      0x7EEE7EEE // Идентификатор записи
#define  IMLPARMCOUNT  32         // Число примитивов (переменное)
#define  IMLLISTCOUNT  64         // Число функций (переменное)

#define  IMG_DRAWLINE    1        // Произвольный набор примитивов линии в IML
#define  IMG_DRAWSQUARE  3        // Произвольный набор примитивов полигона в IML

typedef HANDLE  HVIEW;

typedef struct IMLPARM  // Описание параметров вида объектов
{                       // для заполнения структуры IMGDRAW
  int       Ident;      // Идентификатор записи 0x7EEE7EEE
  int       Count;      // Число примитивов в описании

#if defined(_M_X64) || defined(BUILD_DLL64)       // 16/08/09
  short     Semantic;   // Признак запроса семантики для отображения объекта
  short     Reserv1;    // Должен быть 0
  short     Reserv2;    // Должен быть 0
  short     Reserv3;    // Должен быть 0
#else
  char      Semantic;   // Признак запроса семантики для отображения объекта
  char      Reserv1;    // Должен быть 0
  char      Reserv2;    // Должен быть 0
  char      Reserv3;    // Должен быть 0
#endif

  struct
  {
#if defined(_M_X64) || defined(BUILD_DLL64)       // 16/08/09
    __int64  Type;      // Номера примитивов (IMG_LINE,IMG_DOT..,IMG_DRAW)
                        // см. mapgdi.h
#else
    int      Type;      // Номера примитивов (IMG_LINE,IMG_DOT..,IMG_DRAW)
                        // см. mapgdi.h
#endif
    char  *  Name[4];   // Условное название (назначение) примитива
                        // Name[0]-ML_ENGLISH, Name[1]-ML_RUSSIAN...
  }
    Element[IMLPARMCOUNT];
}
  IMLPARM;

typedef struct IMLLIST
{
  int       Ident;      // Идентификатор записи 0x7EEE7EEE
  int       Count;      // Число видов объектов в описании
  struct
  {
#if defined(_M_X64) || defined(BUILD_DLL64)       // 16/08/09
    __int64   Type;     // Код вида объекта (функции)
#else
    int       Type;     // Код вида объекта (функции)
#endif
    IMLPARM * View;     // Адрес описания параметров отображения
    char * Name[4];     // Условное название (назначение) функции
                        // Name[0]-ML_ENGLISH, Name[1]-ML_RUSSIAN...
  }
    Element[IMLLISTCOUNT];
}
  IMLLIST;

// Контекст отображения карты
// Hdc   -  Для Windows - "HDC", для UNIX - "XCONTEXT*", см.mapapi.h
// Size  -  Размер области вывода, координаты первой точки 0,0
// View  -  Тип устройства вывода (экран/принтер)
// HView -  Указатель на служебные параметры (не должен изменяться !)
// Scale -  Масштаб отображения относительно базового масштаба карты
//   (равен 1, когда масштаб изображения равен масштабу карты,
//   для немасштабируемых объектов при увеличении карты равен 1,
//   то есть, не показывает увеличение карты).
//   Например, при отображении карты  масштаба 1:200000
//   в масштабе 1:500000, относительный масштаб равен 0.4 .
//   Применяется для генерализации изображения объектов.
//   Если объект не масштабируемый - значение масштаба не более 1.
// (Реальный относительный масштаб увеличения (!) при "картографическом"
//  масштабировании можно определить так: Real = 2 * Scale - 1;
//  Если установлен "чертежный" способ масштабирования карты или
//  карта сжимается (Scale < 1.0),
//  то Scale соответствует реальному изменению масштаба;
//  ScaleMethod - cпособ масштабирования.

typedef struct IMGCONTEXT
{
  int        Length;    // Длина структуры для контроля (64 байт)

#if defined(_M_X64) || defined(BUILD_DLL64)       // 16/08/09
  int        View;      // Тип отображения VT_SCREEN, VT_PRINT (maptype.h)

  HDC        Hdc;       // Контекст устройства вывода                          // 17/08/15 Савелов
                        // Для Linux: указатель на структуру XIMAGEDESC,
                        // описывающую битовую область DIB устройства
                        // с идентификатором HVIEW
#else
  HDC        Hdc;       // Контекст устройства вывода
                        // Для Linux: указатель на структуру XIMAGEDESC,
                        // описывающую битовую область DIB устройства
                        // с идентификатором HVIEW

  int        View;      // Тип отображения VT_SCREEN, VT_PRINT (maptype.h)
#endif
  HVIEW      HView;     // Идентификатор параметров устройства (равен HPAINT или 0)  // 26/10/15

  DRAWSIZE   Size;      // Размер области отображения

  float      Scale;     // Масштаб отображения относительно базового
                        // масштаба карты (для немасштабируемых объектов
                        // при увеличении карты всегда равен 1)
  int   ScaleMethod;    // Способ масштабирования (0 - картографический,
                        // 1 - чертежный, метод "лупы")

  double     PixelX;    // Коэффициент пересчета микрон в пикселы устройства
                        // по горизонтали
  double     PixelY;    // Коэффициент пересчета микрон в пикселы устройства
                        // по вертикали

  double     SinAngle;  // Sin угла поворота карты 
  double     CosAngle;  // Cos угла поворота карты
  double     Angle;     // Угол поворота карты (против часовой стрелки)

  double  ViewScale;    // Коэффициент изменения масштаба отображения относительно базового
}
  IMGCONTEXT;

// Для вывода линии заданной длины или толщины (микроны)
// необходимо пересчитать размеры в точки устройства вывода.
// Для этого применяются поля PixelX и PixelY.
// Например, определить число точек по горизонтали в отрезке 1 мм :
// 1 мм = 1000 мкм => 1000 * PixelX (точек устройства)

// Если нужно определить число точек устройства для определенного
// расстояния на местности (метры) с учетом масштаба отображения,
// то дополнительно применяют значение поля ShowScale из структуры
// POLYDATAEX (maptype.h).
// Например, определить число точек по вертикали в отрезке 1 км
// на местности при отображении в текущем масштабе (например, 1 : 50 000) :
// 1 км = 10**9 мкм => 10**9/ShowScale = 2 * 10**4 (мкм на изображении)
// => 2 * 10**4 * PixelY (точек устройства)

#ifndef LINUXAPI    
 #define _IMLAPI WINAPI     // 16/11/15
 #define _IMLIMP __declspec( dllexport )
#else
 #define _IMLAPI
 #define _IMLIMP
#endif

// --------------------------------------------------------
//  ОПИСАНИЕ ФУНКЦИЙ УПРАВЛЕНИЯ БИБЛИОТЕКИ "IML"
//  Эти прототипы могут быть вставлены в программы на
//  языках С и С++
// --------------------------------------------------------

extern "C"
{
 // Запросить список видов графических объектов,
 // поддерживаемых библиотекой
_IMLIMP const IMLLIST * _IMLAPI imlGetImageList(void);

 // Запросить габариты изображения объекта в дискретах в базовом масштабе
 // type - тип объекта (IMLLIST),
 // data - координаты объекта в дискретах (maptype.h);
 // parm - параметры отображения (MAPGDI.H);
 // context - дополнительные параметры отображения,
 // border  - рассчитанные габариты изображения в дискретах.
 // Если функция не поддерживается - возвращает ноль,
 // иначе - ненулевое значение
 _IMLIMP long int _IMLAPI imlGetImageBorder(long int type,
                                    const POLYDATAEX* data,
                                    const IMGDRAW * parm,
                                    const IMGCONTEXT * context,
                                    FRAME * border);

 // Отобразить объект
 // type - тип объекта (IMLLIST);
 // data - координаты объекта (maptype.h);
 //   Параметр data содержит координаты отображаемого объекта
 //   в системе устройства вывода (пикселы)
 //   относительно левого верхнего угла отображаемой области.
 //   (Координаты могут быть (!) :
 //     - отрицательными,  когда объект частично
 //       или полностью не виден;
 //     - не соответствовать правилам цифрового описания
 //       для объектов данного вида :
 //       незамкнутый площадной объект и т.п.;
 //     - ... прочие неприятности ).
 // parm - параметры отображения (MAPGDI.H);
 // context - дополнительные параметры отображения.
 // Возвращаемое значение :
 //  0  - объект не виден (слишком мелкий масштаб
 //       или объект не виден по координатам ...),
 //       или код объекта не поддерживается;
 //  +1 - объект отображен.
 _IMLIMP long int _IMLAPI imlPaintImage(long int type,
                                const POLYDATAEX* data,
                                const IMGDRAW * parm,
                                const IMGCONTEXT * context);

 // Отобразить образец объекта в экранном виде
 // по упрощенной метрике (1,2-5 точек), формируемой
 // самой функцией.
 // Применяется для выбора вида объекта в режиме
 // "дизайна" меню пиктограмм и т.п.
 // Размер "окошка вывода" в параметре size.
 _IMLIMP long int _IMLAPI imlPaintExample(long int type,
                                  const IMGDRAW * parm,
                                  const IMGCONTEXT * context);


 // Проверить попадание графического объекта в отображаемую область
 // type - тип объекта (IMLLIST);
 // data - координаты линии в области памяти от
 //        верхнего левого угла,
 // parm - параметры отображения (MAPGDI.H);
 // context - дополнительные параметры отображения.
 // Возвращаемое значение :
 //  0  - объект не виден (слишком мелкий масштаб
 //       или объект не виден по координатам ...),
 //       или код объекта не поддерживается;
 //  +1 - объект отображен.
 // При ошибке возвращает ноль
 _IMLIMP long int _IMLAPI imlTestVisible(long int type,
                                 const POLYDATAEX * data,
                                 const IMGDRAW * parm,
                                 const IMGCONTEXT * context);


// Запросить внешний код объекта  
// key - ключ объекта
// Semantic - указатель на семантику объекта
// buff - память для возврата ключа(не менее 64 байт)
// size - размер буфера
// Возвращает длину заполненной строки, или 0
// в поле buff символьный внешний код, оканчивающийся 0

 _IMLIMP long int _IMLAPI imlGetImageFullCode(const char * key,
                                              const char * Semantic,
                                              char * buff, int size);
}
// extern "C"

#if defined(BUILD_DLL64) && defined(LINUXAPI)  
#pragma pack(pop)
#endif

#endif // MAPGDIEX_H

