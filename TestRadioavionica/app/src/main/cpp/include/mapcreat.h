/******  MAPCREAT.H  ***********  Belenkov  O.V. *****  13/07/16 ***
*******  MAPCREAT.H  ***********  Shishkova L.A. *****  15/02/12 ***
*******  MAPCREAT.H  ***********  Tarakanova I.R.*****  26/10/12 ***
*******  MAPCREAT.H  ***********  Борзов А.Ю.    *****  11/02/11 ***
*******  MAPCREAT.H  ***********  Dishlenko S.G. *****  26/03/12 ***
*                                                                  *
*              Copyright (c) PANORAMA Group 1991-2016              *
*                     All Rights Reserved                          *
*                                                                  *
********************************************************************
*                                                                  *
*                 ФОРМУЛЯР ЭЛЕКТРОННОЙ КАРТЫ                       *
*                                                                  *
*******************************************************************/

// ИЗМЕНЕНИЯ СТРУКТУР MAPREGISTER И LISTREGISTER НЕ ДОПУСКАЮТСЯ !

#if !defined(MAPCREAT_H)
#define MAPCREAT_H

#ifndef MAPTYPE_H
  #include "maptype.h"
#endif

#define GRADINRAD  57.29577951308232l  // количество градусов в одном радиане

#pragma pack(push,1)

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++  ТАБЛИЦЫ КОДОВ ЭЛЕКТРОННОЙ КАРТЫ  +++++++++++++++++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// Тип карты предназначен для упрощения ввода параметров проекций
// для типовых задач.
// Условно карты можно разделить на топографические и все остальные.
//
// К топографическим картам относятся типы TOPOGRAPHIC (CK_42),UTMNAD27,
// UTMWGS84, UTMTYPE, CK_63, CK_95, TOPOLOCAL, MCK_CK63
// (а также GEOGRAPHIC, если выбрана проекция UTM).
// Топографические карты определяют прямоугольные координаты объектов,
// которые с определенной точностью передают угловые и линейные размеры
// объектов. Топографические карты имеют ограниченную область описания
// территории в пределах +\- 15 градусов от осевого меридиана !
// При сохранении в карту точек, удаленных далее, нарастает погрешность
// пересчета между геодезическими и плоскими координатами !
// Все топографические карты имеют проекцию Равноугольная Гаусса-Крюгера,
// она же UTM (разница в стандартном масштабе на осевом меридиане - 1 и 0.9996).
//
// Если нужно создать некоторую карту для записи координат произвольных точек
// в пределах +\- 80 градусов по широте (кроме полюсов), то можно использовать
// карту типа MERCATOR (аналог Google).
// Если нужно создать некоторую карту для записи координат произвольных точек,
// включая полярные области, то можно использовать карту типа WORLDMAP.
// Если нужно хранить координаты в геодезической системе и попеременно 
// пересчитывать к разным типам карт, то можно использовать карту типа WORLDMAP
// или MAPSPHERE. При этом поле DeviceCapability должно равняться "-7".
// Тип WORLDMAP отображает карту в более привычных пропорциях и может
// применяться, когда карта в процессе работы может отображаться
// самостоятельно. Тип MAPSPHERE применяется для универсального хранилища
// геодезических координат и имеет смысл при хранении координат в градусах
// с постоянным пересчетом к основной отображаемой карте (то одно, то другой)
// при совместном отображении. Эллипсоид желательно выбирать тот, 
// что у основной карты (чаще используемой), если карта создается как 
// вспомогательная к другой карте.
//
// Тип карты LARGESCALE применяется, когда есть плоские прямоугольные координаты,
// а параметры связи с глобальной системой координат отсутствуют.
// Например, поэтажный план, план участка и т.п.
//
// Выбор типа карты не влияет на работу функций определения геодезических
// координат, расчета длин, площадей и азимутов. Но за исключением точек, удаленных
// от осевого меридиана топографической карты, если карта является топографической.
// Все расчеты на любой карте выполняются с автоматическим преобразованием координат 
// к осевому меридиану середины обрабатываемого отрезка.


  // Типы флага "Тип карты"
  typedef enum MAPTYPE
  {
// UNDEFINED   = -1,      // Не установлено
   TOPOGRAPHIC  = 1,      // Топографическая (СК42), требует осевой меридиан
   CK_42        = 1,      // Система координат 42 года, требует осевой меридиан
   GEOGRAPHIC   = 2,      // Обзорно-географическая (тип и эллипсоид зависят от параметров)
   GLOBE        = 3,      // Космонавигационная (ГЛОБУС, цилиндрическая на эллипсоиде Красовского)
   CITYPLAN     = 4,      // Топографический план города (СК42 с произвольными номенклатурами)
   LARGESCALE   = 5,      // Крупномасштабный план местности
   AERONAUTIC   = 6,      // Аэронавигационная
   SEANAUTICOLD = 7,      // Цилиндрическая Меркатора, имеет нестандартные коэффициенты пересчета
                          // плоских координат  
   AVIATION     = 8,      // Авиационная (Цилиндрическая на эллипсоиде Красовского)
   BLANK        = 9,      // Бланковка (Цилиндрическая на эллипсоиде Красовского)
   UTMNAD27     = 10,     // UTM на North American Datum 1927, требует осевой меридиан
   UTMWGS84     = 11,     // UTM на WGS84, требует осевой меридиан
   UTMTYPE      = 12,     // UTM, требует осевой меридиан
   CK_63        = 13,     // Система координат 63 года, требует осевой меридиан
   CK_95        = 14,     // Система координат 95 года, требует осевой меридиан
   TOPOLOCAL    = 15,     // Топографическая с произвольной главной точкой, требует осевой меридиан
   MAPSPHERE    = 16,     // Обзорно-географическая Широта/Долгота на "шаре", 
                          // можно выбрать эллипсоид
   WORLDMAP     = 17,     // Карта Мира (Цилиндрическая Миллера), можно выбрать эллипсоид
   MCK_CK63     = 18,     // Местная система координат на базе СК-63
   MERCATOR     = 19,     // Цилиндрическая Меркатора на шаре "World Mercator" (EPSG:3857, EPSG:3395) 
                          //(аналог Google), можно выбрать эллипсоид
   SEANAUTIC    = 20,     // Морская навигационная (Mercator_2SP), можно выбрать эллипсоид
                          // (Цилиндрическая равноугольная Меркатора на эллипсоиде WGS84)
   GCK_2011     = 21,     // Система координат ГСК-2011, требует осевой меридиан 
   MAPTYPELIMIT = 21,     // Крайнее значение типа карты                    // 12/01/12
  }
   MAPTYPE;


  // Типы флага "Проекция исходного материала"
  typedef enum MAPPROJECTION
  {
// UNDEFINED                   = -1, // Не установлено
   GAUSSCONFORMAL              = 1,  // Равноугольная Гаусса-Крюгера
   CONICALORTHOMORPHIC         = 2,  // Коническая равноугольная (аналог 22)
   CYLINDRICALSPECIAL          = 3,  // Цилиндрическая специальная
   LAMBERT                     = 4,  // Азимутальная равновеликая поперечная Ламберта
                                     // (то же, что и 30) // 25/01/11
   STEREOGRAPHIC               = 5,  // Стереографическая
   POSTEL                      = 6,  // Азимутальная (нормальная) равнопромежуточная
                                     // проекция Постеля
   AZIMUTHALOBLIQUE            = 7,  // Азимутальная равновеликая косая Ламберта
                                     // (то же, что и 30) // 25/01/11
   MERCATORMAP                 = 8,  // Цилиндрическая прямая равноугольная Меркатора
   URMAEV                      = 9,  // Прямая псевдоцилиндрическая c небольшими искажениями площадей
                                     // синусоидальная проекция Урмаева
                                     // (то же, что и 25) // 25/01/11
   POLYCONICAL                 = 10, // Видоизмененная простая поликоническая
                                     // проекция (международная)
                                     // (то же, что и 29) // 25/01/11
   SIMPLEPOLYCONICAL           = 11, // Простая видоизмененная поликоническая
                                     // (то же, что и 29) // 25/01/11
   PSEUDOCONICAL               = 12, // Псевдоконическая произвольная
   STEREOGRAPHICPOLAR          = 13, // Стереографическая полярная
   CHEBISHEV                   = 14, // Равноугольная Чебышева
   GNOMONIC                    = 15, // Гномоническая
   CYLINDRICALSPECIALBLANK     = 16, // Цилиндрическая специальная
                                     // для бланковой карты
   UTM                         = 17, // Transverse Mercator
   KAVRAJSKY                   = 18, // Псевдоцилиндрическая равновеликая
                                     // синусоидальная проекция Каврайского
   MOLLWEIDE                   = 19, // Псевдоцилиндрическая равновеликая
                                     // эллиптическая проекция Мольвейде
   CONICALEQUIDISTANT          = 20, // (Прямая) равнопромежуточная коническая проекция
   CONICALEQUALAREA            = 21, // (Прямая) равновеликая коническая проекция
   CONICALDIRECTORTHOMORPHIC   = 22, // (Прямая) равноугольная коническая проекция Ламберта
   AZIMUTHALORTHOMORPHICPOLAR  = 23, // Азимутальная стереографическая (равноугольная)
                                     // полярная проекция            //08/06/10
   LAMBERTAZIMUTHALEQUALAREA   = 24, // Азимутальная (нормальная) равновеликая
                                     // проекция Ламберта (то же, что и 30) // 25/01/11
   URMAEVSINUSOIDAL            = 25, // Прямая псевдоцилиндрическая c небольшими искажениями площадей
                                     // синусоидальная проекция Урмаева
                                     // для карт океанов(Тихого и Индийского)
   AITOFF                      = 26, // Производная равновеликая
                                     // проекция Аитова-Гамера
   CYLINDRICALEQUALSPACED      = 27, // Цилиндрическая равнопромежуточная проекция
   LAMBERTCYLINDRICALEQUALAREA = 28, // Цилиндрическая равновеликая
                                     // проекция Ламберта
   MODIFIEDPOLYCONICAL         = 29, // Видоизмененная простая поликоническая
                                     // проекция (международная)
   LAMBERTOBLIQUEAZIMUTHAL     = 30, // Азимутальная (косая, нормальная, поперечная) равновеликая
                                     // проекция Ламберта (зависит от положения полюса)
   TRANSVERSECYLINDRICAL       = 31, // Поперечно-цилиндрическая равноугольная
                                     // проекция
   GAUSSCONFORMAL_SYSTEM_63    = 32, // Система координат 63 года
   LATITUDELONGITUDE           = 33, // Широта/Долгота Цилиндрическая на шаре
   MILLERCYLINDRICAL           = 34, // Цилиндрическая Миллера на шаре ESRI:54003
   WORLDMERCATOR               = 35, // Цилиндрическая прямая равноугольная Меркатора
                                     // EPSG:3857 (Popular Visualisation Pseudo Mercator)
   MERCATOR_2SP                = 36, // Цилиндрическая прямая равноугольная Меркатора
   MODIFIEDAZIMUTALEQUIDISTANT = 37, // Модифицированная азимутальная равнопромежуточная (EPSG:9832)
   AZIMUTALEQUIDISTANTGUAM     = 38, // Азимутальная равнопромежуточная проекция Гуам - Guam Projection (EPSG:9831)
   LASTPROJECTIONNUMBER        = 38, // Крайний номер проекции
  }
   MAPPROJECTION;

  // Условные названия проекций в XML
  //   "Pulkovo42"                        // 1    СК-42
  //   "Pulkovo63"                        // 32   СК-63
  //   "Pulkovo95"                        // 1    СК-95
  //   "UTM"                              // 17   UTM NAD83
  //   "Transverse Mercator"              // 17
  //   "Postel Equidistant Azimuthal"     // 6
  //   "Mercator Cylindrical"             // 8
  //   "Kavrajsky Cylindrical Equal Area" // 18
  //   "Mollweide Cylindrical Equal Area" // 19
  //   "Equidistant Conic"                // 20
  //   "Equal Area Conic"                 // 21
  //   "Lambert Conic Conformal"          // 22
  //   "Polar Stereographic"              // 23
  //   "Urmaev Pseudo Cylindrical"        // 25
  //   "Aitoff Azimuthal Equal Area"      // 26
  //   "Equidistant Cylindrical"          // 27
  //   "Lambert Cylindrical Equal Area"   // 28
  //   "Modified Polyconical"             // 29
  //   "Lambert Azimuthal Equal Area"     // 30
  //   "LatitudeLongitude"                // 33
  //   "Miller Cylindrical"               // 34 - EPSG:54003
  //   "World Mercator"                   // 35 - EPSG:3857
  //   "MERCATOR_2SP"                     // 36

  // Типы флага "Вид эллипсоида"
  typedef enum ELLIPSOIDKIND
  {
   UNDEFINED     = -1,     // Не установлено
   KRASOVSKY42   =  1,     // Красовского 1940г.(6378245.0, 298.3)
   WGS_72        =  2,     // Международный 1972г.
   HEYFORD       =  3,     // Хейфорда 1910г. (6378388.0, 297.0)
   CLARKE_80     =  4,     // Кларка 1880г.
   CLARKE_66     =  5,     // Кларка 1866г.
   EVEREST_56    =  6,     // Эвереста 1856г. (6377301.243, 300.8017)
   BESSEL        =  7,     // Бесселя 1841г.
   AIRY          =  8,     // Эри 1830г.
   WGS_84        =  9,     // Международный 1984г.
   SGS_85        = 10,     // ПЗ-90.02      (6378136.0, 298.2578393)
   GRS_80        = 11,     // GRS80         (6378137.0, 298.257222101)
   IERS_96       = 12,     // IERS 1996г.   (6378136.49, 298.25645)
   INTER_1924    = 13,     // Международный 1924г. (6378388.0, 297.00)
   SOUTHAM_69    = 14,     // Южно-Американский 1969г. (6378160.0, 298.25)
   INDONESIAN_74 = 15,     // Индонезийский 1974г. (6378160.0,  298.247)
   HELMERT       = 16,     // Гельмерта 1906г. (6378200.0,  298.3)
   FISCHER_60M   = 17,     // Фишера 1960г. Modified (6378155.0,  298.3)
   FISCHER_68    = 18,     // Фишера 1968г.   (6378150.0,  298.3)
   HOUGH         = 19,     // Хаф 1960г.      (6378270.0,  297.0)
   EVEREST_30    = 20,     // Эвереста 1830г. (6377276.345,  300.8017)
   AUSTRALIAN    = 21,     // Австралийский национальный (6378160.0,  298.25)
   CGCS2000       = 22,    // CGCS2000
   AIRYM          = 23,    // Airy Modified
   BESSELM        = 24,    // Bessel Modified
   BESSELNAMIBIA  = 25,    // Bessel Namibia
   BESSELGLM      = 26,    // Bessel Namibia (GLM)
   CLARKE1880ARC  = 27,    // Clarke 1880 (Arc)
   CLARKE1880SGA22 = 28,   // Clarke 1880 (SGA 1922)
   EVEREST1830D67 = 29,    // Everest 1830 (1967 Definition)
   EVEREST1830M   = 30,    // Everest 1830 Modified
   EVEREST1830RSO69 = 31,  // Everest 1830 (RSO 1969)
   EVEREST1830D75 = 32,    // Everest 1830 (1975 Definition)
   NWL9D          = 33,    // NWL 9D
   PLESSIS1817    = 34,    // Plessis 1817
   STRUVE1860     = 35,    // Struve 1860
   WAROFFICE      = 36,    // War Office
   GEM10C         = 37,    // GEM 10C
   OSU86F         = 38,    // OSU86F
   OSU91A         = 39,    // OSU91A
   GRS_67         = 40,    // GRS 1967
   ATS_77         = 41,    // Average Terrestrial System 1977
   IAG_75         = 42,    // IAG 1975
   GRS_67M        = 43,    // GRS 1967 Modified
   DANISH1876     = 44,    // Danish 1876
   SPHERE_WGS_84  = 45,    // Шар на WGS-84
   GCK_2011_EE    = 46,    // ГСК-2011 Общеземной эллипсоид (6378136.5, 298.2564151)
   SGS_85_2011    = 47,    // ПЗ-90.11      (6378136.0, 298.2578393)
   ELLIPSOIDCOUNT = 47,

   USERELLIPSOID  = 1000,  // Произвольный (пользовательский) эллипсоид

   KRASOVSKY42_95 = 1001,  // Красовского 1940г. СК-95  (don't use)
   EC90TEMP       = 1002,  // ПЗ-90                     (don't use)
  }
   ELLIPSOIDKIND;

  // Типы флага "Система высот"
  typedef enum HEIGHTSYSTEM
  {
// UNDEFINED   = -1,       // Не установлено
   BALTIC      =  1,       // Балтийская система высот
   AUSTRALIA   =  2,       // Австралийская система высот 1971г.                    // 26/10/12
   ADRIATIC    =  3,       // Средний уровень Адриатического моря в Триесте (Австрия, Югославия)
   NORTHSEA    =  4,       // Средний уровень Северного моря в Остенде "Зеро-Нормаль"
   OSTEND      =  5,       // Средний уровень низких вод Северного моря в Остенде -   "Нуль понт де шоссе" ( Бельгия)
   LAMANSH     =  6,       // Средний уровень моря в проливе Ламанш
   BELFAST     =  7,       // Средний уровень Ирландского моря в Белфасте (Северная   Ирландия)
   MALIKXED    =  8,       // Средний уровень Атлантического океана в Малик-Xед (Ирландия)
   DUBLIN      =  9,       // Уровень низкой воды в Дублинском заливе (Ирландия)
   AEGEAN      = 10,       // Средний уровень Эгейского моря в порту Пирей (Греция)
   DENMARK     = 11,       // Средний уровень моря у датского побережья (Дания)
   ICELAND     = 12,       // Средний уровень залива Фахсафлоуи у Рейкьявика (Исландия)
   ALICANTE    = 13,       // Средний уровень Средиземного моря в Аликанте (Испания
   CANARY      = 14,       // Средний уровень Атлантического океана (для Канарских островов)
   GENOA       = 15,       // Средний уровень Лигурийского моря в Генуе (Италия)
   NORMALNULL  = 16,       // Средний уровень Северного моря - нуль Амстердамского футштока "Нормаль-Нуль" (Нидерланды, ФРГ)
   OSLO        = 17,       // Средний уровень моря в Осло - "Норвежский нормальный нуль" (Южная  Норвегия)
   NARVIK      = 18,       // Средний уровень моря в бухте Нарвик (Северная Норвегия)
   CASCAIS     = 19,       // Средний уровень Атлантического океана в Кашкаиш (Португалия)
   HELSINKI    = 20,       // Средний уровень Балтийского моря в Xельсинки (Финляндия)
   SWEDEN      = 21,       // Средний уровень воды у шведских берегов (Швеция)
   MARSEL      = 22,       // Средний уровень Средиземного моря в Марселе
   TYRKEY      = 23,       // Средний уровень морей, омывающих Турцию (Турция)
   USAKANADA   = 24,       // Средний уровень морей и океанов,омывающих США и Канаду
   BALTIC77    = 25,       // Балтийская система 1977 г.
   OKHOTSK     = 26,       // Средний уровень Охотского моря и Тихого океана
   PEACEOCEAN  = 27        // Средний уровень мирового океана
  }
   HEIGHTSYSTEM;

  // Типы флага "Система координат"
  typedef enum COORDINATESYSTEM
  {
// UNDEFINED          = -1,  // Не установлено
   ORTHOGONAL          = 1,  // Система координат 42 года
   UNIVERSALMERCATOR   = 2,  // Система проекции Меркатора
   NATIONALGRID        = 3,  // Национальная прямоугольная сетка Великобритании
   AREAORTHOGONAL      = 4,  // Прямоугольная местная система координат
   SYSTEM_63           = 5,  // Система координат 63 года
   CONDITION           = 6,  // Прямоугольная условная для обзорных карт
   GEOCOORDINATE       = 7,  // Геодезические координаты в радианах
   GEOCOORDINATEGRADUS = 8,  // Геодезические координаты в градусах
   SYSTEM_95           = 9,  // Система координат 95 года
   GCK_2011_CRS        = 10, // Система координат ГСК-2011
  }
   COORDINATESYSTEM;

  typedef enum WORKTYPE
  {
   MCK_CK42     = 215,     // Местная система координат на базе СК-42        // 21/09/09
   MCK_CK95     = 216,     // Местная система координат на базе СК-95
   MCK_UTM      = 218      // Местная система координат на базе UTM\WGS84    // 21/09/09
  }
   WORKTYPE;


  // Типы флага "Вид рамки"
  typedef enum FRAMEKIND
  {
// UNDEFINED    = -1,     // Не установлено
   TRAPEZE      = 1,      // Трапециевидная без точек излома
   TRAPEZECURVE = 2,      // Трапециевидная с точками излома
   RECTANGULAR  = 3,      // Прямоугольная
   CIRCLE       = 4       // Круговая
  }
   FRAMEKIND;

  typedef struct COORDINATES
  {
    double Coord[4];
  }
    COORDINATES;

  // Число элементов в таблице масштабов
  enum COUNTSCALE
  {
    COUNTTOPO      = 11,       // Топографическая                 //17/08/10
    COUNTGEOG      = 5,        // Обзорно-географическая
    COUNTAERO      = 2,        // Аэронавигационная
    COUNTCITYPLAN  = 3,        // Топографический план города
    COUNTLARGE     = 7,        // Крупномасштабный план
    COUNT63        = 8,        // Топографическая 63 года         // 30/06/10
    COUNTSCALENONE = 16        // Тип карт не установлен
  };

  // Коды подсистем для обзорно-географических карт
  enum GEOGRAPHICCODE     // 02/10/09
  {
// UNDEFINED    = -1,     // Не установлено
    EUROPE           = 1,    // блок Европа
    ASIA             = 2,    // блок Азия
    PACIFICOCEAN     = 3,    // Тихий океан
    AMERICANORTH     = 4,    // Северная Америка
    ATLANTICOCEAN    = 5,    // Атлантический океан
    NORTHPOLARSYSTEM = 6,    // Северная полярная подсистема
    SOUTHPOLARSYSTEM = 7,    // Южная полярная подсистема
    EQUATORIALSYSTEM = 8     // Экваториальная подсистема
  };

  // Флаги допустимых параметров проекций (mapGetProjectionParameters)
  enum PROJECTIONPARAMETERS
  {
    EPP_AXISMERIDIAN       = 1,  // Осевой меридиан (Долгота полюса проекции)
    EPP_MAINPOINTPARALLEL  = 2,  // Параллель главной точки (Широта полюса проекции)
    EPP_FIRSTMAINPARALLEL  = 4,  // Первая главная параллель
    EPP_SECONDMAINPARALLEL = 8,  // Вторая главная параллель
    EPP_FALSEEASTING       = 16, // Смещение координат по оси Y
    EPP_FALSENORTHING      = 32, // Смещение координат по оси X
    EPP_SCALEFACTOR        = 64, // Масштабный коэффициент на осевом меридиане
  };

typedef struct REGISTERTYPES
{
  // Типы флага соответствия проекции
  enum PROJECTION
  {
    NOADEQUACY = 0,   // Данные не соответствуют проекции
    ADEQUACY   = 1    // Данные соответствуют проекции
  };

  // Типы флага "Единицы измерения"
  enum UNIT
  {
   METRE         = 0,    // Метры
   FOOT          = 16,   // Футы
   RADIAN        = 64,   // Радианы
   DEGREE        = 65,   // Градусы

   KILOMETRE     = 5,    // Километры
   METRE05       = 4,    // 0.5 м
   DECIMETRE     = 1,    // Дециметры
   CENTIMETRE    = 2,    // Сантиметры
   MILLIMETRE    = 3,    // Миллиметры
   SECOND01      = 66,   // 0.1 сек
   RADIAN8       = 67,   // 10e+8 рад
  };


  // Типы флага "Вид рамки"
  enum FRAMEKIND
  {
// UNDEFINED    = -1,     // Не установлено
   TRAPEZE      = 1,      // Трапециевидная без точек излома
   TRAPEZECURVE = 2,      // Трапециевидная с точками излома
   RECTANGULAR  = 3,      // Прямоугольная
   CIRCLE       = 4       // Круговая
  };

  // Типы исходного материала
  // Вид источника информации
  enum MAPINITKIND
  {
    MAP     = 1,           // Картографический
    PHOTO   = 2,           // Фотоплан
    IMAGE   = 3,           // Фотоснимок
    GRAM    = 4            // Фотограмметрический
  };

  // Вид исходного карт/фотоматериала
  enum MAPINITTYPE
  {
   MAPRUN     = 1,        // Тиражный оттиск
   FINAL      = 2,        // Издательский оригинал
   MANUSCRIPT = 3,        // Составительский оригинал
   UPDATE     = 4,        // Оригинал изменений
   SPECIAL    = 5,        // Специальный оригинал
   CONSTANT   = 6,        // Диапозитив постоянного хранения
  };

  // Вид исходного фотоматериала
  enum PHOTOINITKIND
  {
   FGM        = 7,        // Фотограмметрический материал
   FGMMAPRUN  = 8,        // ФГМ и тиражный оттиск
   FGMMANUSCRIPT = 9,     // ФГМ и составительский оригинал
   FGMFINAL      = 10,    // ФГМ и издательский оригинал
   FGMCONSTANT   = 11,    // ФГМ и диапозитив постоянного хранения
   FGMSPECIAL    = 12,    // ФГМ и специальный оригинал
   SPACE         = 64,    // Космические
   AERO          = 65,    // Аэроснимки
   PHOTOGRAM     = 66     // Фототеодолитные снимки
  };


  // Типы масштабов для Равноугольной проекции Гаусса-Крюгера
  enum SCALEGAUSS
  {
   FGKSCALEMLN = 1,
   FGKSCALE500 = 2,
   FGKSCALE200 = 3,
   FGKSCALE100 = 4,
   FGKSCALE50  = 5,
   FGKSCALE25  = 6,
   FGKSCALE10  = 7,
   FGKSCALE5   = 8,
   FGKSCALE2   = 9
  };

  // Типы масштабов для обзорно-географических карт
  enum SCALEGEOG
  {
   FGEOSCALE10MLN = 1,
   FGEOSCALE5MLN  = 2,
   FGEOSCALE2MLN  = 3,
   FGEOSCALEMLN   = 4,
   FGEOSCALE500   = 5
  };

  // Типы масштабов аэронавигационных карт
  enum SCALEAERO
  {
   FARSCALE4MLN = 1,
   FARSCALE2MLN = 2
  };

  // Типы масштабов для карт топографический план города
  enum SCALECITYPLAN
  {
   FCPSCALE25 = 1,
   FCPSCALE10 = 2
  };

  // Количество типов для таблиц соответствий
  enum TABLEVALUETYPE
  {
   COUNTMAPTYPE = 21,             // тип карты                      // 16/04/10
   COUNTUNIT    = 12,             // единицы измерения
   COUNTUNITHEIGHT = 8,           // единицы измерения по высоте
   COUNTELL     = ELLIPSOIDCOUNT+1,  // вид эллипсоида                     // 21/01/10
   COUNTHEIGHT  =  9,             // система высот
   COUNTCOORD   =  8,             // система координат
   COUNTPROJ    = 34,             // проекция                    // 16/04/10
   COUNTMAPINITKIND = 5,          // вид исходного материала
   COUNTMAPINITTYPE = 7,          // тип ИКМ
   COUNTPHOTO   = 10,             // тип снимков
   COUNTFRAME   = 5,              // вид рамки
   COUNTGEOGRAPHICCODE = 9        // коды для обзорно-географических карт
  };

  int RegZero[2];                 // Выравнивание структуры 
}
  REGISTERTYPES;

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++  ФОРМУЛЯР ЛИСТА ЭЛЕКТРОННОЙ КАРТЫ  ++++++++++++++++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++

typedef struct LISTREGISTER
{
  int         Length                 ;  // Размер данной структуры (544)
  char        Nomenclature[32]       ;  // Номенклатура листа
  char        ListName[32]           ;  // Название листа
  char        FileName[260]          ;  // Имя файла по которому в районе будет
                                        // создан лист с данным именем
                                        // и расширениями HDR, DAT, SEM, DRW

  // Прямоугольные координаты листа в метрах
  double      XSouthWest             ;  // X ю-з
  double      YSouthWest             ;  // Y ю-з
  double      XNorthWest             ;  // X с-з
  double      YNorthWest             ;  // Y с-з
  double      XNorthEast             ;  // X с-в
  double      YNorthEast             ;  // Y с-в
  double      XSouthEast             ;  // X ю-в
  double      YSouthEast             ;  // Y ю-в

  // Геодезические координаты листа в радианах
  double      BSouthWestCoordinate   ;  // B ю-з
  double      LSouthWestCoordinate   ;  // L ю-з
  double      BNorthWestCoordinate   ;  // B с-з
  double      LNorthWestCoordinate   ;  // L с-з
  double      BNorthEastCoordinate   ;  // B с-в
  double      LNorthEastCoordinate   ;  // L с-в
  double      BSouthEastCoordinate   ;  // B ю-в
  double      LSouthEastCoordinate   ;  // L ю-в

  int         MaterialKind           ;  // Вид исходного материала
  int         MaterialType           ;  // Тип ИКМ
  int         ReliefHeight           ;  // Высота сечения рельефа в дециметрах
  char        Date[12]               ;  // Дата съемки "ГГГГММДД"

  double      MagneticAngle          ;  // Магнитное склонение
  double      YearMagneticAngle      ;  // Годовое магнитное склонение
  double      MeridianAngle          ;  // Среднее сближение меридианов
  char        DateAngle[12]          ;  // Дата склонения "ГГГГММДД"

  unsigned int UpdateDate            ;  // Дата обновления листа в виде числа YYYYMMDD по Гринвичу
  unsigned int UpdateTime            ;  // Время обновления листа в виде числа - секунды с 0 часов по Гринвичу
  char        Reserve[20]            ;  // = 0
}
  LISTREGISTER;

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++++++++ "ФОРМУЛЯР РАЙОНА РАБОТ" ++++++++++++++++++++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++

typedef struct MAPREGISTER
{
  int         Length                 ; // Размер данной структуры

  char        Name[32]               ; // Имя района
  int         Scale                  ; // Знаменатель масштаба
  int         EPSGCode               ; // Код EPSG системы координат     // 12/06/15
  int         EllipsoideKind         ; // Вид эллипсоида
  int         HeightSystem           ; // Система высот
  int         MaterialProjection     ; // Проекция исх. материала
  int         CoordinateSystem       ; // Система координат
  int         PlaneUnit              ; // Единица измерения в плане
  int         HeightUnit             ; // Единица измерения по высоте
  int         FrameKind              ; // Вид рамки
  int         MapType                ; // Обобщенный тип карты
  int         DeviceCapability       ; // Разрешающая способность прибора
  int         DataProjection         ; // Наличие данных о проекции
  int         OrderViewSheetFlag     ; // Резерв = 0
  int         FlagRealPlace          ; // Признак реальных координат
  int         ZoneNumber             ; // Заполняется системой при запросе
                                       // формуляра - номер зоны топокарты

                                       // В радианах
  double      FirstMainParallel      ; // Первая главная параллель
  double      SecondMainParallel     ; // Вторая главная параллель
  double      AxisMeridian           ; // Осевой меридиан
  double      MainPointParallel      ; // Параллель главной точки
}
  MAPREGISTER;


typedef struct MAPREGISTEREX
{
  int         Length                 ; // Размер данной структуры
  char        Name[32]               ; // Имя района
  int         Scale                  ; // Знаменатель масштаба
  int         EPSGCode               ; // Код EPSG системы координат     // 12/06/15
  int         EllipsoideKind         ; // Вид эллипсоида
  int         HeightSystem           ; // Система высот
  int         MaterialProjection     ; // Проекция исх. материала
  int         CoordinateSystem       ; // Система координат
  int         PlaneUnit              ; // Единица измерения в плане
  int         HeightUnit             ; // Единица измерения по высоте
  int         FrameKind              ; // Вид рамки
  int         MapType                ; // Обобщенный тип карты
  int         DeviceCapability       ; // Разрешающая способность прибора
                                       // Обычно равна 20 000
                                       // Для карт повышенной точности: 
                                       // -1 - максимальная точность
                                       // -2 - хранить координаты в сантиметрах
                                       // -3 - хранить координаты в миллиметрах
                                       // -7 - хранить координаты в радианах     // 17/03/10
  int         DataProjection         ; // Наличие данных о проекции (0/1)
  int         ZoneIdent              ; // Идентификатор района (для МСК 63: A-X или 0)
  int         FlagRealPlace          ; // Вид карты: 0:MAP (многолистовая с рамками),
                                       // 1:SIT (безразмерный лист), 2:SITX (один файл), -1:SIT c рамкой, -2:SITX с рамкой
  int         ZoneNumber             ; // Заполняется системой при запросе
                                       // формуляра - номер зоны топокарты

                                       // В радианах
  double      FirstMainParallel      ; // Первая главная параллель  StandardParallel1
  double      SecondMainParallel     ; // Вторая главная параллель  StandardParallel2
  double      AxisMeridian           ; // Осевой меридиан (Долгота полюса проекции) CentralMeridian
  double      MainPointParallel      ; // Параллель главной точки (Широта полюса проекции) LatitudeOfOrigin
  double      PoleLatitude           ; // (Latitude of false origin, etc)
  double      PoleLongitude          ; // (Longitude of false origin, etc)
                                                                     // 21/09/09
  double      FalseEasting           ; // Смещение координат по оси Y
  double      FalseNorthing          ; // Смещение координат по оси X
  double      ScaleFactor            ; // Масштабный коэффициент на осевом меридиане (1.0 +\- ...)
  double      TurnAngle              ; // Угол разворота осей для локальных систем (МСК)

  double      Reserv2[4]             ; // Резерв = 0
}
  MAPREGISTEREX;


// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Параметры эллипсоида                                      // 26/02/10
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++

typedef struct ELLIPSOIDPARAM
{
  double SemiMajorAxis;          // Длина большой полуоси эллипсоида
  double InverseFlattening;      // Полярное сжатие эллипсоида
}
  ELLIPSOIDPARAM;


// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Коэффициенты трансформирования геодезических координат    // 26/02/10
// при переходе от заданного эллипсоида к эллипсоиду WGS-84
// Если задано 3 параметра, то применяется преобразование
// Молоденского (Standard Molodensky Transformations),
// если (6+1) - преобразование по ГОСТ Р 51794 - 2007
// (обратное преобразование Гельмерта, или Coordinate Frame Rotation;
// EPSG dataset coordinate operation method code 1032)
// Пример значений полей в DATUMPARAM:
// 24.47; -130.89; -81.56; 0; 0; -0.13; -0.00000022; 7; 0
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++

typedef struct DATUMPARAM
{
  double DX;           // Сдвиги по осям в метрах
  double DY;
  double DZ;
  double RX;           // Угловые поправки в секундах
  double RY;
  double RZ;
  double M;            // Поправка масштаба
  int    Count;        // 3 или 7  (14 - признак пересчета через ПЗ-90.02 для СК42\95)
  int    Reserve;      // Равно 0
}
  DATUMPARAM;

// ПЗ-90.02  ->  WGS-84
#define DX_SGS85_WGS84      -0.36
#define DY_SGS85_WGS84       0.08
#define DZ_SGS85_WGS84       0.18
#define RX_SGS85_WGS84       0.0
#define RY_SGS85_WGS84       0.0
#define RZ_SGS85_WGS84       0.0
#define  M_SGS85_WGS84       0

// ПЗ-90.11  ->  WGS-84
#define DX_SGS85_11_WGS84    0.013
#define DY_SGS85_11_WGS84   -0.106
#define DZ_SGS85_11_WGS84   -0.022
#define RX_SGS85_11_WGS84    0.0023
#define RY_SGS85_11_WGS84   -0.00354
#define RZ_SGS85_11_WGS84    0.00421
#define  M_SGS85_11_WGS84    0.000000008

// ГСК-2011 ->  WGS-84
#define DX_GCK2011_WGS84     0.01          // 12/07/16 
#define DY_GCK2011_WGS84    -0.12          // 21/06/16
#define DZ_GCK2011_WGS84    -0.03
#define RX_GCK2011_WGS84     0.001738
#define RY_GCK2011_WGS84    -0.003559
#define RZ_GCK2011_WGS84     0.004263
#define  M_GCK2011_WGS84     0.0000000074

// СК-95  ->  ПЗ-90.02  (Count = 14)
#define DX_S95_SGS85        24.83l
#define DY_S95_SGS85      -130.97l
#define DZ_S95_SGS85       -81.74l
#define RX_S95_SGS85         0.0
#define RY_S95_SGS85         0.0
#define RZ_S95_SGS85        -0.13
#define  M_S95_SGS85        -0.00000022L

// СК-42  ->  ПЗ-90.02  (Count = 14)
#define DX_S42_SGS85        23.93L
#define DY_S42_SGS85      -141.03L
#define DZ_S42_SGS85       -79.98L
#define RX_S42_SGS85         0.0L
#define RY_S42_SGS85        -0.35L
#define RZ_S42_SGS85        -0.79L
#define  M_S42_SGS85        -0.00000022L

// СК-95  ->  WGS-84 (Count = 7)
#define DX_S95_WGS84        24.47l
#define DY_S95_WGS84      -130.89l
#define DZ_S95_WGS84       -81.56l
#define RX_S95_WGS84         0.0
#define RY_S95_WGS84         0.0
#define RZ_S95_WGS84        -0.13
#define  M_S95_WGS84        -0.00000022L

// СК-42  -> WGS-84  (Count = 7)
#define DX_S42_WGS84        23.57
#define DY_S42_WGS84      -140.95
#define DZ_S42_WGS84       -79.8
#define RX_S42_WGS84         0.0
#define RY_S42_WGS84        -0.35
#define RZ_S42_WGS84        -0.79
#define  M_S42_WGS84        -0.00000022L

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Список названий для листов карты
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
typedef struct SHEETNAMES           // 14/10/14      // 20/01/16
{
  WCHAR        Nomenclature[232];   // Номенклатура листа в UTF-16 с замыкающим нулем
  WCHAR        Reserve1[24];        // Резерв, равен нулю
  WCHAR        ListName[232];       // Имя листа карты в UTF-16 с замыкающим нулем
  WCHAR        Reserve2[24];        // Резерв, равен нулю
  WCHAR        FileName[232];       // Имя файлов листа карты в UTF-16 с замыкающим нулем
  char         Ident[34];           // Идентификатор листа карты GUID (32 шестнадцатеричных символа)
  char         Reserve3[14];        // Резерв, равен нулю
}
  SHEETNAMES;

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Параметры геодезической системы координат в базе данных EPSG      // 11/02/11
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++

typedef struct EPSGGEODSYS
{
  int      GeodSysCode;        // Код геодезической системы координат в базе данных EPSG
  int      UnitCode;           // Код единицы измерения в базе данных EPSG
  int      EllipsoidCode;      // Код эллипсоида в базе данных EPSG
  int      DatumCode;          // Код датума в базе данных EPSG
                               // в терминах EPSG - код преобразования координат
                               // (поле COORD_OP_CODE в таблице Coordinate_Operation,
                               // если записей несколько, то выбирется последняя)
  char     GeodSysName[256];   // Название проекции в базе данных EPSG
  char     EllipsoidName[256]; // Название эллипсоида в базе данных EPSG
  char     DatumName[256];     // Название датума в базе данных EPSG
}
  EPSGGEODSYS;

// Направление оси координат
enum AXISDIR
{
   NORTH     = 1,  // север
   SOUTH     = 2,  // юг
   WEST      = 3,  // запад
   EAST      = 4,  // восток
};


// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Параметры прямоугольной системы координат в базе данных EPSG    // 11/02/11
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++

typedef struct EPSGRECTSYS
{
  int RectSysCode;        // код прямоугольной системы координат в базе данных EPSG
  int GeodSysCode;        // код базовой геодезической системы координат в базе данных EPSG
  int UnitCode;           // код единицы измерения в базе данных EPSG
  int ProjectionCode;     // код проекции в базе данных EPSG (см. EPSGTRANSVERSEMERCATOR и т.д.)
                          // в терминах EPSG - код метода преобразования координат
                          // (поле COORD_OP_METHOD_CODE в таблице Coordinate_Operation Method)
  int XDirection;         // направление оси Х (первой координаты)
  int YDirection;         // направление оси Y (второй координаты)
  char RectSysName[256];  // название прямоугольной системы координат в базе данных EPSG
}
  EPSGRECTSYS;

// Тип единицы измерения
enum EPSGUNITTYPE
{
  LINEAR = 0,  // линейная (стандартная единица - метры)
  ANGLE  = 1,  // угловая  (стандартная единица - радианы)
  SCALE  = 2,  // масштабный коэффициент
};

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Единицы измерения в базе данных EPSG                        // 11/02/11
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// Единица измерения (за исключением форматов, где в дробной части градусов закодированы минуты и секунды)
typedef struct EPSGUNIT
{
  int     UnitCode;   // код единицы измерения
  int     UnitType;   // тип
  double  Factor;     // коэффициент для приведения к стандартной единице измерения
                      // (метры, радианы, коэффициент)
  char    Name[128];  // название единицы измерения
}
  EPSGMEASUNIT;

#pragma pack(pop)

#endif